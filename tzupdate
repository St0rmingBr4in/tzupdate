#!/usr/bin/env python

"""Automatically determine local time zone based on IP geolocation."""

import argparse
import httplib
import json
import os
import sys
import urllib

zoneinfo_path = "/usr/share/zoneinfo"
localtime_path = "/etc/localtime"

class MissingZoneInfoFile(Exception):
    """Raised when we can't find a timezone in our local zoneinfo database."""
    pass

def location_from_ip(ip=None):
    """
    Return location data for an IP using the IPInfoDB API.

    :param ip: IP address to get location for
    :returns: latitude and longitude
    """

    url = "http://api.ipinfodb.com/v3/ip-city/?"
    url_params = {
        "key": "c253fddcfa96b60155aa66fb51b20cba" \
               "dbcfa2020b2d27a89d4554ac2799b935",
        "format": "json",
    }

    if ip is not None:
        url_params["ip"] = ip

    res_handle = urllib.urlopen(url + urllib.urlencode(url_params))
    res_data = json.load(res_handle)

    coords = {
        "latitude": res_data["latitude"],
        "longitude": res_data["longitude"],
    }

    return coords

def timezone_from_location(coords):
    """
    Return the timezone for a set of coordinates using the GeoNames API.

    :param coords: latitude and longitude
    :returns: timezone
    """

    url = "http://api.geonames.org/timezoneJSON?"
    url_params = {
        "username": "tzupdate",
        "lat": coords["latitude"],
        "lng": coords["longitude"],
    }

    res_handle = urllib.urlopen(url + urllib.urlencode(url_params))
    res_data = json.load(res_handle)

    timezone = res_data["timezoneId"]

    return timezone

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-d", "--dry-run", action="store_true", help="Don't update the localtime symlink")
    parser.add_argument("-i", "--ipinfodb-api-key", default="c253fddcfa96b60155aa66fb51b20cbadbcfa2020b2d27a89d4554ac2799b935", help="Override default API key for IPInfoDB")
    parser.add_argument("-u", "--geonames-username", default="tzupdate", help="Override default GeoNames username")
    parser.add_argument("-v", "--verbose", action="store_true", help="Print what we are doing")
    args = parser.parse_args()

    if args.verbose:
        def vprint(*args):
            print " ".join(args)
    else:
        vprint = lambda *args: None

    coords = location_from_ip()

    tz = timezone_from_location(coords)

    tz_path = os.path.join(zoneinfo_path, tz)
    if not os.path.isfile(tz_path):
        raise MissingZoneInfoFile(tz)

    if args.dry_run:
        print "Exiting due to dry run"
        sys.exit(0)

    if os.path.exists(localtime_path):
        vprint("localtime file %s already exists, unlinking" % localtime_path)
        os.unlink(localtime_path)
    vprint("Symlinking %s to %s" % (localtime_path, tz_path))
    os.symlink(tz_path, localtime_path)
    print "Set timezone: %s" % tz
