#!/usr/bin/env python

"""
Set the local timezone based on IP geolocation.
"""

from __future__ import print_function
import argparse
import errno
import json
import os
import sys

try:
    from urllib.request import urlopen
    from urllib.parse import urlencode
except ImportError:  # Python 2 fallback
    from urllib import urlopen, urlencode


zoneinfo_path = "/usr/share/zoneinfo"
localtime_path = "/etc/localtime"


def location_from_ip():
    """
    Return location data for an IP using the IPInfoDB API.

    :param ip: IP address to get location for
    :returns: latitude and longitude
    """

    url = "http://api.ipinfodb.com/v3/ip-city/?"
    url_params = {
        "key": "c253fddcfa96b60155aa66fb51b20cba"
               "dbcfa2020b2d27a89d4554ac2799b935",
        "format": "json",
    }

    res_handle = urlopen(url + urlencode(url_params))

    try:
        res_encoding = res_handle.headers.get_content_charset()
    except AttributeError:  # Python 2 fallback
        res_encoding = res_handle.headers.getparam("charset")

    res_data = json.loads(res_handle.read().decode(res_encoding))

    coords = {
        "latitude": res_data["latitude"],
        "longitude": res_data["longitude"],
    }

    return coords


def timezone_from_location(coords):
    """
    Return the timezone for a set of coordinates using the GeoNames API.

    :param coords: latitude and longitude
    :returns: timezone
    """

    url = "http://api.geonames.org/timezoneJSON?"
    url_params = {
        "username": "tzupdate",
        "lat": coords["latitude"],
        "lng": coords["longitude"],
    }

    res_handle = urlopen(url + urlencode(url_params))

    try:
        res_encoding = res_handle.headers.get_content_charset()
    except AttributeError:  # Python 2 fallback
        res_encoding = res_handle.headers.getparam("charset")

    res_data = json.loads(res_handle.read().decode(res_encoding))

    timezone = res_data["timezoneId"]

    return timezone


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-p", "--print-only",
        action="store_true",
        help="print the timezone, but don't update the system time"
    )
    args = parser.parse_args()

    coords = location_from_ip()
    timezone = timezone_from_location(coords)

    if args.print_only is False:
        timezone_path = os.path.join(zoneinfo_path, timezone)
        if not os.path.isfile(timezone_path):
            print("Unknown timezone: " + timezone_path, file=sys.stderr)
            sys.exit(1)

        try:
            os.unlink(localtime_path)
        except OSError as e:
            if e.errno != errno.ENOENT:
                raise

        os.symlink(timezone_path, localtime_path)

    print(timezone)
